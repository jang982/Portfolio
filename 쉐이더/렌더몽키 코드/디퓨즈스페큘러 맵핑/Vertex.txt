float4x4 gWorldMatrix;
float4x4 gViewMatrix;
float4x4 gProjectionMatrix;

float4 gWorldLightPosition;
float4 gWorldCameraPosition;

struct VS_INPUT
{
   float4 mPosition:POSITION;
   float3 mNormal:NORMAL;
   float2 mUV:TEXCOORD0;
};

struct VS_OUTPUT
{
   float4 mPosition:POSITION;
   float2 mUV:TEXCOORD0;
   float3 mDiffuse:TEXCOORD1;
   float3 mViewDir:TEXCOORD2;
   float3 mReflection:TEXCOORD3;
};


VS_OUTPUT vs_main(VS_INPUT Input)
{
   VS_OUTPUT Output;
   
   Output.mPosition=mul(Input.mPosition,gWorldMatrix);
   
   float3 lightDir=Output.mPosition.xyz - gWorldLightPosition.xyz;
   lightDir=normalize(lightDir);
   
   float3 viewDir=normalize(Output.mPosition.xyz-gWorldCameraPosition);
   Output.mViewDir=viewDir;
   
   
   Output.mPosition=mul(Output.mPosition,gViewMatrix);
   Output.mPosition=mul(Output.mPosition,gProjectionMatrix);
   
   float3 worldNormal=mul(Input.mNormal,(float3x3)gWorldMatrix);
   worldNormal=normalize(worldNormal);
   
   
   Output.mDiffuse=dot(-lightDir,worldNormal);
   Output.mReflection=reflect(lightDir,worldNormal);
   
   Output.mUV=Input.mUV;
   
   return Output;
}
